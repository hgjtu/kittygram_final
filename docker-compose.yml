version: '3.8'

volumes:
  pg_data:
  static:
  media:

services:
  db:
    image: postgres:13
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  backend:
    build: ./backend/
    env_file: .env
    volumes:
      - static:/app/static/
      - media:/app/media/
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "until pg_isready -h db -U ${POSTGRES_USER}; do
        echo 'Waiting for PostgreSQL...';
        sleep 2;
      done &&
      python manage.py migrate &&
      gunicorn your_project.wsgi:application --bind 0.0.0.0:8000"

  frontend:
    build: ./frontend/
    env_file: .env
    volumes:
      - static:/static
    depends_on:
      - backend
    command: sh -c "npm run build && cp -r /app/build/. /static/"
    restart: unless-stopped

  gateway:
    build: ./nginx/
    env_file: .env
    ports:
      - "9000:80"
    volumes:
      - static:/static
      - media:/media
    depends_on:
      - backend
      - frontend
    restart: unless-stopped